{"name": "Проверка фильтра на skillbox", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ui-product-card-main__label f f--12\">...</span> is not clickable at point (154, 438). Other element would receive the click: <a href=\"/course/profession-python/\" target=\"_blank\" class=\"ui-product-card-main__wrap\">...</a>\n  (Session info: chrome=127.0.6533.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF65FB79632+30946]\n\t(No symbol) [0x00007FF65FB2E3C9]\n\t(No symbol) [0x00007FF65FA26FDA]\n\t(No symbol) [0x00007FF65FA7FEEE]\n\t(No symbol) [0x00007FF65FA7D962]\n\t(No symbol) [0x00007FF65FA7AE7B]\n\t(No symbol) [0x00007FF65FA7A095]\n\t(No symbol) [0x00007FF65FA6C271]\n\t(No symbol) [0x00007FF65FA9CA6A]\n\t(No symbol) [0x00007FF65FA6BBB6]\n\t(No symbol) [0x00007FF65FA9CC80]\n\t(No symbol) [0x00007FF65FABB041]\n\t(No symbol) [0x00007FF65FA9C813]\n\t(No symbol) [0x00007FF65FA6A6E5]\n\t(No symbol) [0x00007FF65FA6B021]\n\tGetHandleVerifier [0x00007FF65FCAF83D+1301229]\n\tGetHandleVerifier [0x00007FF65FCBBDB7+1351783]\n\tGetHandleVerifier [0x00007FF65FCB2A03+1313971]\n\tGetHandleVerifier [0x00007FF65FBADD06+245686]\n\t(No symbol) [0x00007FF65FB3758F]\n\t(No symbol) [0x00007FF65FB33804]\n\t(No symbol) [0x00007FF65FB33992]\n\t(No symbol) [0x00007FF65FB2A3EF]\n\tBaseThreadInitThunk [0x00007FFC03077374+20]\n\tRtlUserThreadStart [0x00007FFC04CBCC91+33]", "trace": "self = <tests.test_xxx.TestExemple object at 0x0000012F63E60450>\nset_up_browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1117a37bc5fcd54a74fab1f082eacf4b\")>\n\n    @allure.title('Проверка фильтра на skillbox')\n    def test_skillbox(self, set_up_browser):\n        driver = set_up_browser\n        with allure.step('Открытие формы'):\n            driver.get('https://skillbox.ru/code/')\n        with allure.step('Check-box выбор позиции: Профессия'):\n>           driver.find_element(By.XPATH, \"(//*[contains(text(), 'Профессия')])[3]\").click()\n\ntests\\test_xxx.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\gnida\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\gnida\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\gnida\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000012F64610710>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF65FB2A3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC03077374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC04CBCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ui-product-card-main__label f f--12\">...</span> is not clickable at point (154, 438). Other element would receive the click: <a href=\"/course/profession-python/\" target=\"_blank\" class=\"ui-product-card-main__wrap\">...</a>\nE         (Session info: chrome=127.0.6533.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF65FB79632+30946]\nE       \t(No symbol) [0x00007FF65FB2E3C9]\nE       \t(No symbol) [0x00007FF65FA26FDA]\nE       \t(No symbol) [0x00007FF65FA7FEEE]\nE       \t(No symbol) [0x00007FF65FA7D962]\nE       \t(No symbol) [0x00007FF65FA7AE7B]\nE       \t(No symbol) [0x00007FF65FA7A095]\nE       \t(No symbol) [0x00007FF65FA6C271]\nE       \t(No symbol) [0x00007FF65FA9CA6A]\nE       \t(No symbol) [0x00007FF65FA6BBB6]\nE       \t(No symbol) [0x00007FF65FA9CC80]\nE       \t(No symbol) [0x00007FF65FABB041]\nE       \t(No symbol) [0x00007FF65FA9C813]\nE       \t(No symbol) [0x00007FF65FA6A6E5]\nE       \t(No symbol) [0x00007FF65FA6B021]\nE       \tGetHandleVerifier [0x00007FF65FCAF83D+1301229]\nE       \tGetHandleVerifier [0x00007FF65FCBBDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF65FCB2A03+1313971]\nE       \tGetHandleVerifier [0x00007FF65FBADD06+245686]\nE       \t(No symbol) [0x00007FF65FB3758F]\nE       \t(No symbol) [0x00007FF65FB33804]\nE       \t(No symbol) [0x00007FF65FB33992]\nE       \t(No symbol) [0x00007FF65FB2A3EF]\nE       \tBaseThreadInitThunk [0x00007FFC03077374+20]\nE       \tRtlUserThreadStart [0x00007FFC04CBCC91+33]\n\n..\\gnida\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Открытие формы", "status": "passed", "start": 1723299366059, "stop": 1723299424242}, {"name": "Check-box выбор позиции: Профессия", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ui-product-card-main__label f f--12\">...</span> is not clickable at point (154, 438). Other element would receive the click: <a href=\"/course/profession-python/\" target=\"_blank\" class=\"ui-product-card-main__wrap\">...</a>\n  (Session info: chrome=127.0.6533.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF65FB79632+30946]\n\t(No symbol) [0x00007FF65FB2E3C9]\n\t(No symbol) [0x00007FF65FA26FDA]\n\t(No symbol) [0x00007FF65FA7FEEE]\n\t(No symbol) [0x00007FF65FA7D962]\n\t(No symbol) [0x00007FF65FA7AE7B]\n\t(No symbol) [0x00007FF65FA7A095]\n\t(No symbol) [0x00007FF65FA6C271]\n\t(No symbol) [0x00007FF65FA9CA6A]\n\t(No symbol) [0x00007FF65FA6BBB6]\n\t(No symbol) [0x00007FF65FA9CC80]\n\t(No symbol) [0x00007FF65FABB041]\n\t(No symbol) [0x00007FF65FA9C813]\n\t(No symbol) [0x00007FF65FA6A6E5]\n\t(No symbol) [0x00007FF65FA6B021]\n\tGetHandleVerifier [0x00007FF65FCAF83D+1301229]\n\tGetHandleVerifier [0x00007FF65FCBBDB7+1351783]\n\tGetHandleVerifier [0x00007FF65FCB2A03+1313971]\n\tGetHandleVerifier [0x00007FF65FBADD06+245686]\n\t(No symbol) [0x00007FF65FB3758F]\n\t(No symbol) [0x00007FF65FB33804]\n\t(No symbol) [0x00007FF65FB33992]\n\t(No symbol) [0x00007FF65FB2A3EF]\n\tBaseThreadInitThunk [0x00007FFC03077374+20]\n\tRtlUserThreadStart [0x00007FFC04CBCC91+33]\n\n", "trace": "  File \"C:\\Users\\User PC\\PycharmProjects\\pythonProject2\\tests\\test_xxx.py\", line 62, in test_skillbox\n    driver.find_element(By.XPATH, \"(//*[contains(text(), 'Профессия')])[3]\").click()\n  File \"C:\\Users\\User PC\\PycharmProjects\\gnida\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\User PC\\PycharmProjects\\gnida\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User PC\\PycharmProjects\\gnida\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\User PC\\PycharmProjects\\gnida\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1723299424242, "stop": 1723299425394}], "attachments": [{"name": "log", "source": "b0cdd562-dde9-46b4-a868-9edc0d901be6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "browser_name", "value": "'chromium'"}], "start": 1723299366059, "stop": 1723299425395, "uuid": "274d3bfc-f44e-41ea-ae6e-67e7f66ade47", "historyId": "87945e4f541cd7da5ec9d3d05e3c3a26", "testCaseId": "f3d789bb9b6620c08f1d8950934d587f", "fullName": "tests.test_xxx.TestExemple#test_skillbox", "labels": [{"name": "story", "value": "Объекты тестирования"}, {"name": "feature", "value": "Тестирование web-приложений"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_xxx"}, {"name": "subSuite", "value": "TestExemple"}, {"name": "host", "value": "DESKTOP-LA7QC7D"}, {"name": "thread", "value": "800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_xxx"}]}